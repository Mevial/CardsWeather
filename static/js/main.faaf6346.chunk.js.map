{"version":3,"sources":["dal/weatherAPI.ts","dal/cityAPI.ts","bll/slices/currentWeatherSlice.ts","components/SearchInput/searchInput.tsx","components/AddItemForm/AddItemForm.tsx","app/header/Header.tsx","components/weatherCard/WeatherCard.tsx","app/App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx","app/App.module.css","components/AddItemForm/AddItemForm.module.css","components/weatherCard/WeatherCard.module.css"],"names":["KEY_ID","METRIC","instance","axios","create","baseURL","weatherAPI","city","get","id","cityAPI","initialState","cities","weather","clouds","all","coord","lon","lat","dt","main","temp","pressure","humidity","feels_like","temp_max","temp_min","name","sys","country","sunrise","type","sunset","wind","speed","deg","gust","isLoading","response","status","message","toggle","currentWeatherSlice","createSlice","reducers","setItemLocalStorage","state","action","payload","testValue","changeToggle","fetchCurrentWeather","fetchCurrentWeatherSuccess","data","statusText","fetchCurrentWeatherError","removeWeatherCard","index","findIndex","splice","addCityWeatherCard","newCityId","find","cityId","unshift","localStorage","setItem","JSON","stringify","updateCityWeatherCard","cityIndex","actions","updateWeatherCardId","dispatch","a","res","press","time","moment","format","console","log","sleep","delay","Promise","resolve","setTimeout","Asynchronous","React","open","setOpen","options","setOptions","loading","length","active","topCity","Autocomplete","sx","width","onOpen","onClose","isOptionEqualToValue","option","value","title","getOptionLabel","renderInput","params","TextField","label","InputProps","endAdornment","CircularProgress","color","size","AddItemForm","memo","addItem","useDispatch","useState","setTitle","error","setError","useSelector","currentWeatherSliceReducer","addItemHandler","trim","changeHandlerRadio","useCallback","e","currentTarget","checked","useEffect","setInterval","i","clearInterval","className","styles","Container","CityForm","variant","onChange","onSubmit","helperText","IconButton","onClick","AddBox","Button","Checkbox","Header","header","WeatherCard","textNameWithoutCards","map","City","Country","Temp","Hum","Pressure","SpeedWind","CityId","Card","minWidth","minHeight","maxWidth","maxHeight","CardContent","Typography","fontSize","gutterBottom","Math","floor","CardActions","style","justifyContent","newCities","filter","deleteOneCty","App","result","getItem","parse","app","Cards","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","window","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.faaf6346.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {Weather} from \"../types/types\";\r\n\r\nconst KEY_ID = \"161e3d9231985b40493daa0a166386ca\";\r\nconst METRIC = '&units=metric'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.openweathermap.org/data/2.5/weather'\r\n})\r\n\r\n// api\r\nexport const weatherAPI = {\r\n    getCurrentWeather(city: string) {\r\n        return instance.get<Weather>(`?q=${city}&appid=${KEY_ID}${METRIC}`);\r\n    },\r\n    getCurrentWeatherByCoordinates(lat: number, lon: number) {\r\n        return instance.get<Weather>(`?lat=${lat}&lon=${lon}&appid=${KEY_ID}${METRIC}`);\r\n    },\r\n    getCurrentWeatherById(id: number) {\r\n        return instance.get<Weather>(`?id=${id}&appid=${KEY_ID}${METRIC}`);\r\n    }\r\n};\r\n","import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://countriesnow.space/api/v0.1/'\r\n})\r\n\r\n// api\r\nexport const cityAPI = {\r\n    getAllCity() {\r\n        return instance.get<AxiosResponse>('countries');\r\n    },\r\n};\r\n\r\n\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AppDispatch} from \"../store\";\r\nimport {weatherAPI} from \"../../dal/weatherAPI\";\r\nimport {CityType, Weather} from \"../../types/types\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport moment from \"moment\";\r\nimport {cityAPI} from \"../../dal/cityAPI\";\r\n\r\nconst ZERO_NUMBER = 0\r\nconst VOID_STRING = ''\r\n\r\ntype CurrentWeather = {\r\n    cities: CityType[],\r\n    weather: Weather,\r\n    isLoading: boolean,\r\n    response: Response,\r\n    toggle: boolean\r\n}\r\n\r\ntype Response = {\r\n    status: number,\r\n    message: string\r\n}\r\nconst initialState: CurrentWeather = {\r\n    cities: [],\r\n    weather: {\r\n        clouds: {\r\n            all: ZERO_NUMBER,\r\n        },\r\n        coord: {\r\n            lon: ZERO_NUMBER,\r\n            lat: ZERO_NUMBER,\r\n        },\r\n        dt: ZERO_NUMBER,\r\n        id: ZERO_NUMBER,\r\n        main: {\r\n            temp: ZERO_NUMBER,\r\n            pressure: ZERO_NUMBER,\r\n            humidity: ZERO_NUMBER,\r\n            feels_like: ZERO_NUMBER,\r\n            temp_max: ZERO_NUMBER,\r\n            temp_min: ZERO_NUMBER,\r\n        },\r\n        name: VOID_STRING,\r\n        sys: {\r\n            id: ZERO_NUMBER,\r\n            country: VOID_STRING,\r\n            sunrise: ZERO_NUMBER,\r\n            type: ZERO_NUMBER,\r\n            sunset: ZERO_NUMBER,\r\n        },\r\n        wind: {\r\n            speed: ZERO_NUMBER,\r\n            deg: ZERO_NUMBER,\r\n            gust: ZERO_NUMBER,\r\n        },\r\n\r\n    },\r\n    isLoading: false,\r\n    response: {\r\n        status: ZERO_NUMBER,\r\n        message: VOID_STRING,\r\n    },\r\n    toggle: false\r\n};\r\n\r\nconst currentWeatherSlice = createSlice({\r\n    name: 'current-weather',\r\n    initialState,\r\n    reducers: {\r\n        setItemLocalStorage(state, action: PayloadAction<{ testValue: Array<CityType> }>) {\r\n            state.cities = [...action.payload.testValue]\r\n        },\r\n        changeToggle(state, action: PayloadAction<boolean>) {\r\n            state.toggle = action.payload\r\n        },\r\n        fetchCurrentWeather(state) {\r\n            state.isLoading = true\r\n        },\r\n        fetchCurrentWeatherSuccess(state, action: PayloadAction<AxiosResponse<Weather>>) {\r\n            state.isLoading = false\r\n            state.weather = action.payload.data\r\n            state.response = {\r\n                status: action.payload.status,\r\n                message: action.payload.statusText,\r\n            };\r\n        },\r\n        fetchCurrentWeatherError(state, action: PayloadAction<AxiosResponse<Weather>>) {\r\n            state.isLoading = false\r\n            state.response = {\r\n                status: action.payload.status,\r\n                message: action.payload.statusText,\r\n            };\r\n        },\r\n        //number - it is CityId\r\n        removeWeatherCard(state, action: PayloadAction<number>) {\r\n            const index = state.cities.findIndex(city => city.id === action.payload)\r\n            if (index > -1) {\r\n                state.cities.splice(index, 1)\r\n            }\r\n        },\r\n        addCityWeatherCard(state, action: PayloadAction<CityType>) {\r\n            const newCityId = action.payload.id\r\n            const isExistingCityId = state.cities.find(cityId => cityId.id === newCityId)\r\n            if (!isExistingCityId) {\r\n                state.cities.unshift(action.payload)\r\n            }\r\n            localStorage.setItem(\"value\", JSON.stringify([...state.cities]))\r\n        },\r\n        updateCityWeatherCard(state, action: PayloadAction<CityType>) {\r\n            const newCityId = action.payload.id\r\n            const cityIndex = state.cities.findIndex(cityId => cityId.id === newCityId)\r\n            if (cityIndex > -1) {\r\n                state.cities[cityIndex] = {...action.payload}\r\n            }\r\n        }\r\n    },\r\n});\r\n\r\nexport const {\r\n    removeWeatherCard,\r\n    addCityWeatherCard,\r\n    updateCityWeatherCard,\r\n    changeToggle,\r\n    setItemLocalStorage\r\n} = currentWeatherSlice.actions\r\n\r\nexport default currentWeatherSlice.reducer\r\n\r\n//thunk\r\nexport const fetchCurrentWeather =\r\n    (payload: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(currentWeatherSlice.actions.fetchCurrentWeather()) //dispatch action fetchCurrent(status=true)\r\n\r\n            const res = await weatherAPI.getCurrentWeather(payload) //have response\r\n\r\n            dispatch(addCityWeatherCard({\r\n                name: res.data.name,\r\n                id: res.data.id,\r\n                country: res.data.sys.country,\r\n                temp: res.data.main.temp,\r\n                humidity: res.data.main.humidity,\r\n                press: res.data.main.pressure,\r\n                speed: res.data.wind.speed,\r\n                time: moment().format('MMMM Do YYYY, h:mm:ss a')\r\n            }))\r\n            if (res.status === 200) {\r\n                dispatch(currentWeatherSlice.actions.fetchCurrentWeatherSuccess(res))\r\n\r\n            } else {\r\n                dispatch(currentWeatherSlice.actions.fetchCurrentWeatherError(res))\r\n            }\r\n        } catch (error) {\r\n            console.log((error))\r\n        }\r\n\r\n    };\r\nexport const updateWeatherCardId =\r\n    (cityId: number) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(currentWeatherSlice.actions.fetchCurrentWeather()) //dispatch action fetchCurrent(status=true)\r\n            const res = await weatherAPI.getCurrentWeatherById(cityId) //have response\r\n            dispatch(updateCityWeatherCard({\r\n                name: res.data.name,\r\n                id: res.data.id,\r\n                country: res.data.sys.country,\r\n                temp: res.data.main.temp,\r\n                humidity: res.data.main.humidity,\r\n                press: res.data.main.pressure,\r\n                speed: res.data.wind.speed,\r\n                time: moment().format('MMMM Do YYYY, h:mm:ss a')\r\n            }))\r\n            if (res.status === 200) {\r\n                dispatch(currentWeatherSlice.actions.fetchCurrentWeatherSuccess(res))\r\n\r\n            } else {\r\n                dispatch(currentWeatherSlice.actions.fetchCurrentWeatherError(res))\r\n            }\r\n        } catch (error) {\r\n            console.log((error))\r\n        }\r\n\r\n    };\r\n\r\nexport const getCityTC =\r\n    () => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(currentWeatherSlice.actions.fetchCurrentWeather()) //dispatch action fetchCurrent(status=true)\r\n\r\n            const res = await cityAPI.getAllCity() //have response\r\n            console.log(res.data)\r\n        } catch (error) {\r\n            console.log((error))\r\n        }\r\n\r\n    };\r\n\r\n","import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\ninterface City {\r\n    title: string;\r\n}\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\nexport default function Asynchronous() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState<readonly City[]>([]);\r\n    const loading = open && options.length === 0;\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n        (async () => {\r\n            await sleep(1e3); // For demo purposes.\r\n\r\n            if (active) {\r\n                setOptions([...topCity]);\r\n            }\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            id=\"asynchronous-demo\"\r\n    sx={{ width: 300 }}\r\n    open={open}\r\n    onOpen={() => {\r\n        setOpen(true);\r\n    }}\r\n    onClose={() => {\r\n        setOpen(false);\r\n    }}\r\n    isOptionEqualToValue={(option, value) => option.title === value.title}\r\n    getOptionLabel={(option) => option.title}\r\n    options={options}\r\n    loading={loading}\r\n    renderInput={(params) => (\r\n        <TextField\r\n            {...params}\r\n    label=\"Work in progress...\"\r\n    InputProps={{\r\n    ...params.InputProps,\r\n            endAdornment: (\r\n            <React.Fragment>\r\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n        {params.InputProps.endAdornment}\r\n        </React.Fragment>\r\n    ),\r\n    }}\r\n    />\r\n)}\r\n    />\r\n);\r\n}\r\n\r\n    const topCity = [\r\n        {title: 'Minsk'},\r\n        {title: 'Brest'},\r\n        {title: 'Gomel'},\r\n        {title: 'Grodno'},\r\n        {title: 'Mogilev'},\r\n        {title: 'Vicebsk'},\r\n    ];\r\n","import React, {ChangeEvent, FormEvent, useCallback, useEffect, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\nimport {Button, Checkbox} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../bll/store\";\r\nimport {CityType} from \"../../types/types\";\r\nimport {changeToggle, updateWeatherCardId} from \"../../bll/slices/currentWeatherSlice\";\r\nimport styles from './AddItemForm.module.css'\r\nimport Asynchronous from \"../SearchInput/searchInput\";\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\nexport const AddItemForm = React.memo(function ({addItem}: AddItemFormPropsType) {\r\n    const dispatch = useDispatch()\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    const cities = useSelector<RootState, CityType[]>(state => state.currentWeatherSliceReducer.cities)\r\n    const toggle = useSelector<RootState, boolean>(state => state.currentWeatherSliceReducer.toggle)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onFormSubmit = (e: FormEvent<HTMLDivElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n\r\n        }\r\n        addItemHandler();\r\n\r\n    }\r\n    const changeHandlerRadio = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeToggle(e.currentTarget.checked))\r\n\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        let id: any\r\n        if (!toggle) {\r\n            return () => clearInterval(id)\r\n        }\r\n        if (cities.length > 0) {\r\n            id = setInterval(() => {\r\n                for (let i = 0; i < cities.length; i++) {\r\n                    dispatch(updateWeatherCardId((cities[i].id)))\r\n                }\r\n            }, 5000)\r\n            return () => clearInterval(id)\r\n        }\r\n    }, [toggle,cities,dispatch])\r\n\r\n    return <div className={styles.Container}>\r\n        <div className={styles.CityForm}><TextField variant=\"outlined\"\r\n                        error={!!error}\r\n                        value={title}\r\n                        onChange={onChangeHandler}\r\n                        onSubmit={onFormSubmit}\r\n                        label=\"City\"\r\n                        helperText={error}\r\n                        color={'secondary'}\r\n        />\r\n            <IconButton color=\"primary\" onClick={addItemHandler}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n\r\n        <Button variant=\"contained\" size={\"small\"}>update every 5sec <Checkbox\r\n            color=\"secondary\"\r\n            onChange={changeHandlerRadio}/></Button>\r\n<Asynchronous/>\r\n    </div>\r\n})\r\n","import styles from './Header.module.css'\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {fetchCurrentWeather, getCityTC} from \"../../bll/slices/currentWeatherSlice\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport const Header = () => {\r\n    const dispatch = useDispatch();\r\n    const addCity = (title: string) => {\r\n        dispatch(fetchCurrentWeather(title))\r\n        dispatch(getCityTC())\r\n    }\r\n    return (\r\n        <div className={styles.header}>\r\n            <div>\r\n                <AddItemForm addItem={addCity}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport {CityType} from \"../../types/types\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../bll/store\";\r\nimport {removeWeatherCard, updateWeatherCardId} from \"../../bll/slices/currentWeatherSlice\";\r\nimport styles from './WeatherCard.module.css'\r\nexport const WeatherCard = () => {\r\n    const dispatch = useDispatch();\r\n    const cities = useSelector<RootState, CityType[]>(state => state.currentWeatherSliceReducer.cities)\r\n\r\n    const deleteOneCty = (cityId: number) => {\r\n        const newCities = cities.filter((city) => cityId !== city.id);\r\n        localStorage.setItem('value', JSON.stringify(newCities));\r\n        dispatch(removeWeatherCard(cityId))\r\n    }\r\n\r\n    const refreshOneCity = (id: number) => {\r\n        dispatch(updateWeatherCardId(id))\r\n    }\r\n    return (\r\n        <>\r\n            {cities.length === 0\r\n                ? (<span className={styles.textNameWithoutCards}>you have no cities saved</span>)\r\n                : (cities.map((city) => {\r\n                            const City = city.name\r\n                            const Country = city.country\r\n                            const Temp = city.temp\r\n                            const Hum = city.humidity\r\n                            const Pressure = city.press\r\n                            const SpeedWind = city.speed\r\n                            const CityId = city.id\r\n                            return (\r\n                                <div key={city.id}>\r\n                                    <Card sx={{minWidth: 275, minHeight: 250, maxWidth: 350, maxHeight: 300}}>\r\n                                        <CardContent className='Wrapper'>\r\n                                            <Typography sx={{fontSize: 14}} color=\"text.secondary\" gutterBottom>\r\n                                                Город: {City}, {Country}\r\n                                            </Typography>\r\n                                            <Typography sx={{fontSize: 14}} color=\"text.secondary\" gutterBottom>\r\n                                                Температура: {Math.floor(Temp)}°C\r\n                                            </Typography>\r\n                                            <Typography sx={{fontSize: 14}} color=\"text.secondary\" gutterBottom>\r\n                                                Влажность: {Hum}%\r\n                                            </Typography>\r\n                                            <Typography sx={{fontSize: 14}} color=\"text.secondary\" gutterBottom>\r\n                                                Атмосферное давление: {Pressure} hpa\r\n                                            </Typography>\r\n                                            <Typography sx={{fontSize: 14}} color=\"text.secondary\" gutterBottom>\r\n                                                Сила ветра: {SpeedWind} М/C\r\n                                            </Typography>\r\n                                            <Typography sx={{fontSize: 14}} color=\"text.secondary\" gutterBottom>\r\n                                                Последнее обновление данных: {city.time}\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                        <CardActions style={{justifyContent: 'center'}}>\r\n                                            <Button variant=\"contained\" size=\"small\" color={\"warning\"}\r\n                                                    onClick={() => {\r\n                                                        deleteOneCty(CityId)\r\n                                                    }}>Delete</Button>\r\n                                            <Button variant=\"contained\" size=\"small\" color={\"success\"}\r\n                                                    onClick={() => {\r\n                                                        refreshOneCity(CityId)\r\n                                                    }}>Refresh</Button>\r\n                                        </CardActions>\r\n                                    </Card>\r\n                                </div>\r\n\r\n                            );\r\n\r\n                        }\r\n                    )\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\nimport style from './App.module.css';\nimport {Header} from \"./header/Header\";\nimport {WeatherCard} from \"../components/weatherCard/WeatherCard\";\nimport {setItemLocalStorage} from \"../bll/slices/currentWeatherSlice\";\nimport {useDispatch} from \"react-redux\";\nimport {CityType} from \"../types/types\";\n\nfunction App() {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        const result = localStorage.getItem(\"value\")\n        if (result) {\n            const testValue: Array<CityType> = JSON.parse(result)\n            dispatch(setItemLocalStorage({testValue}))\n        }\n    }, [dispatch])\n\n    return (\n        <div className={style.app}>\n            <Header/>\n            <div className={style.Cards}><WeatherCard/></div>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers} from \"redux\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport currentWeatherSliceReducer from './slices/currentWeatherSlice'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    currentWeatherSliceReducer,\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware => getDefaultMiddleware({\r\n        serializableCheck: false\r\n    }))\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\nexport type AppStore = typeof store\r\nexport type AppDispatch = AppStore[\"dispatch\"]\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__om1oB\",\"Cards\":\"App_Cards__1ykIJ\",\"header\":\"App_header__2FE9L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"AddItemForm_Container__25mbA\",\"CityForm\":\"AddItemForm_CityForm__1gYqo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textNameWithoutCards\":\"WeatherCard_textNameWithoutCards__3jFcm\"};"],"sourceRoot":""}